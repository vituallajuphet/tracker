import axios from"axios";import{setTimeout}from"timers";const burl="http://localhost/smtp_api/",hosting={namespaced:!0,state:{hosting_data:[]},actions:{get_all_host:({commit:commit})=>new Promise((resolve,reject)=>{axios.get(burl+"hosting/getall").then(response=>{console.log(response),200==response.data.code?setTimeout(()=>{commit("SET_HOSTING",response.data),resolve(response.data)},1e3):reject(response.data)})}),save_hosting:({commit:commit},formData)=>new Promise((resolve,reject)=>{axios.post(burl+"hosting/admin/savehosting",formData).then(response=>{200==response.data.code?resolve(response.data):reject(response.data)})}),update_hosting:({commit:commit},formData)=>new Promise((resolve,reject)=>{axios.post(burl+"hosting/admin/updatehosting",formData).then(response=>{200==response.data.code?resolve(response.data):reject(response.data)})}),delete_hosting:({commit:commit},formData)=>new Promise((resolve,reject)=>{axios.post(burl+"hosting/admin/deletehosting",formData).then(response=>{200==response.data.code?resolve(response.data):reject(response.data)})})},getters:{getHostings:state=>state.hosting_data,getspecificHostings:state=>id=>state.hosting_data.data.find(hostt=>hostt.id==id),getIsExist:state=>hostData=>state.hosting_data.data.filter(hostt=>hostt.hosting_ip==hostData.hosting_ip&&hostt.hosting_name==hostData.hname)},mutations:{SET_HOSTING(state,dd){state.hosting_data=dd}}};export default hosting;
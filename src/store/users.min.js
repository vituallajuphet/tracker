import axios from"axios";import{setTimeout}from"timers";const burl="http://localhost/smtp_api/";axios.interceptors.response.use(response=>response,error=>Promise.reject(error));const users={namespaced:!0,state:{users:{fname:"",lname:"",token:"",user_id:"",email:"",typ:""},hasConnection:!1,isAuth:!1,allusers:[]},actions:{login_accnt:({commit:commit},formdata)=>new Promise((resolve,reject)=>{axios.post(burl+"user/login",formdata).then(response=>{200==response.data.code?(resolve(response.data),commit("SET_USER",response.data)):reject(response.data)}).catch(err=>{reject({code:500})})}),update_account:({commit:commit},formdata)=>new Promise((resolve,reject)=>{axios.post(burl+"user/updatepassword",formdata).then(response=>{200==response.data.code?resolve(response.data):reject(response.data)})}),createuser_accnt:({commit:commit},formdata)=>new Promise((resolve,reject)=>{axios.post(burl+"user/create",formdata).then(response=>{setTimeout(()=>{200==response.data.code?resolve(response.data):reject(response.data)},1e3)})}),get_check_auth:({commit:commit},formdata)=>new Promise((resolve,reject)=>{axios.post(burl+"user/check_auth",formdata).then(response=>{200==response.data.code?(commit("AUTH_USER",response.data),resolve(response.data)):(localStorage.removeItem("tokenID"),commit("UNAUTH_USER"),reject({code:200}))}).catch(err=>{reject({code:err})})}),logout_user({commit:commit,state:state}){var formData=new FormData;return formData.append("token",state.users.token),formData.append("user_id",state.users.user_id),new Promise((resolve,reject)=>{axios.post(burl+"user/logout",formData).then(response=>{200==response.data.code?setTimeout(()=>{commit("LOGOUT_USER"),resolve(response.data)},1e3):reject(response.data)})})},checkConnection:({commit:commit})=>new Promise((resolve,reject)=>{axios.get(burl+"user/checkconnection").then(response=>{200==response.data.code&&(resolve(200),commit("SET_CONNECTION",!0))}).catch(err=>{commit("SET_CONNECTION",!1),con,reject(400)})}),getAllUsers:({commit:commit},formdata)=>new Promise((resolve,reject)=>{axios.post(burl+"user/getallusers",formdata).then(response=>{200==response.data.code&&(commit("SET_ALL_USERS",response.data.data),resolve(200))}).catch(err=>{reject(response.data)})}),approveUser:({commit:commit},formdata)=>new Promise((resolve,reject)=>{axios.post(burl+"user/admin/approve",formdata).then(response=>{200==response.data.code&&resolve(200)}).catch(err=>{reject(response.data)})}),deleteUser:({commit:commit},formdata)=>new Promise((resolve,reject)=>{axios.post(burl+"user/admin/delete-user",formdata).then(response=>{200==response.data.code&&resolve(200)}).catch(err=>{reject(response.data)})})},getters:{get_auth:state=>state.isAuth,getUserInfo:state=>state.users,getConnection:state=>state.hasConnection,getUserid:state=>state.users.user_id,getusers:state=>state.allusers,getApprovedusers:state=>state.allusers.filter(usrs=>1==usrs.approved).length,getPendingusers:state=>state.allusers.filter(usrs=>0==usrs.approved).length,getAllApproved:state=>state.allusers.filter(usrs=>1==usrs.approved),getAllPending:state=>state.allusers.filter(usrs=>0==usrs.approved)},mutations:{SET_USER(state,dd){state.users.fname=dd.fname,state.users.lname=dd.lname,state.users.user_id=dd.user_id,state.users.token=dd.token,state.users.email=dd.email,state.users.typ=dd.user_type,localStorage.setItem("tokenID",dd.token),state.hasConnection=!0,state.isAuth=!0},UNAUTH_USER(state){state.users.user_id="",state.users.token="",state.users.fname="",state.users.lname="",state.users.email="",state.users.typ="",state.hasConnection=!1,state.isAuth=!1},AUTH_USER(state,dd){state.users.user_id=dd.data[0].user_id,state.users.token=dd.data[0].token_value,state.users.fname=dd.data[0].fname,state.users.lname=dd.data[0].lname,state.users.email=dd.data[0].email,state.users.typ=dd.data[0].user_type,state.hasConnection=!0,state.isAuth=!0},LOGOUT_USER(state){state.users.fname="",state.users.lname="",state.users.user_id="",state.users.token="",state.users.email="",state.users.typ="",localStorage.removeItem("tokenID"),state.hasConnection=!1,state.isAuth=!1},SET_CONNECTION(state,con){state.hasConnection=con},UNSET_CONNECTION(state,con){state.hasConnection=!1},SET_ALL_USERS(state,users){state.allusers=users}}};export default users;